/*
Copyright 2023 The Kubernetes Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/maiqueb/persistentips/pkg/crd/persistentip/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IPAMLeaseLister helps list IPAMLeases.
// All objects returned here must be treated as read-only.
type IPAMLeaseLister interface {
	// List lists all IPAMLeases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IPAMLease, err error)
	// IPAMLeases returns an object that can list and get IPAMLeases.
	IPAMLeases(namespace string) IPAMLeaseNamespaceLister
	IPAMLeaseListerExpansion
}

// iPAMLeaseLister implements the IPAMLeaseLister interface.
type iPAMLeaseLister struct {
	indexer cache.Indexer
}

// NewIPAMLeaseLister returns a new IPAMLeaseLister.
func NewIPAMLeaseLister(indexer cache.Indexer) IPAMLeaseLister {
	return &iPAMLeaseLister{indexer: indexer}
}

// List lists all IPAMLeases in the indexer.
func (s *iPAMLeaseLister) List(selector labels.Selector) (ret []*v1alpha1.IPAMLease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPAMLease))
	})
	return ret, err
}

// IPAMLeases returns an object that can list and get IPAMLeases.
func (s *iPAMLeaseLister) IPAMLeases(namespace string) IPAMLeaseNamespaceLister {
	return iPAMLeaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IPAMLeaseNamespaceLister helps list and get IPAMLeases.
// All objects returned here must be treated as read-only.
type IPAMLeaseNamespaceLister interface {
	// List lists all IPAMLeases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IPAMLease, err error)
	// Get retrieves the IPAMLease from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IPAMLease, error)
	IPAMLeaseNamespaceListerExpansion
}

// iPAMLeaseNamespaceLister implements the IPAMLeaseNamespaceLister
// interface.
type iPAMLeaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IPAMLeases in the indexer for a given namespace.
func (s iPAMLeaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IPAMLease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPAMLease))
	})
	return ret, err
}

// Get retrieves the IPAMLease from the indexer for a given namespace and name.
func (s iPAMLeaseNamespaceLister) Get(name string) (*v1alpha1.IPAMLease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipamlease"), name)
	}
	return obj.(*v1alpha1.IPAMLease), nil
}
